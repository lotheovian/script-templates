#!/bin/bash
app_name="dev_utils"
exe_name="$(basename $0)"
functions="${app_name} \
           gbranch gpush gpull gmerge gdiff gcheckout \
           dps drm dstart dkill dbuild"

############################################
############# GLOBAL FUNCTIONS #############
############################################

function dev_utils() {
   if [ "$1" == "setup" ]
   then echo setting up ${app_name}
        if [ ! -d ~/bin ]
        then echo making ~/bin
             mkdir -p ~/bin || exit 1
             
        fi
        if [ ! -f ~/bin/${app_name} ]
        then echo coping ${app_name} into ~/bin
             cp $0 ~/bin/${app_name} || exit 1
        fi

        if ! grep "$HOME/bin" <<< "$PATH" &> /dev/null && ! grep '^PATH+\?=' ~/.bash_profile|grep '$HOME/bin' &> /dev/null
        then echo 'adding $HOME/bin to $PATH in ~/.bash_profile'
             echo 'PATH+=:$HOME/bin' >> ~/.bash_profile || exit 1
             echo 'export PATH' >> ~/.bash_profile || exit 1
             source ~/.bash_profile || exit 1
        fi
             
        for func in $functions
        do if [ ! -f ~/bin/$func ]
           then ln -s ~/bin/${app_name} ~/bin/$func || exit 1
                echo "adding symlink for $func function"
           fi
        done
        echo ${app_name} should now be available
   else echo "${app_name} - Shortcuts for git cli"
        echo 'Usage: ${app_name} [setup]'
        echo 'Commands provided when setup'
        for func in $functions
        do echo $func
        done
        exit 0
   fi
}        

get_yn() {
   # $1 should be -y or -n
   # $2 should be the yn message
   
   #Get the default yn flag
   default_yn="$(echo ${1:1:1}|tr a-z A-Z)"
   other_yn="$(grep -o "[^$default_yn]" <<< "YN"|tr A-Z a-z)"
   read -p "$2 $other_yn[$default_yn]: " yn
   response_yn="$(echo ${yn}|tr A-Z a-z)"
   # Return if the response was the optional choice 
   # If -y is passed and anything other than N is entered, it will return true
   # If -n is passed and anything other than Y is entered, it will return true
   [ "$other_yn" == "$response_yn" ]
}

############################################
############## GIT FUNCTIONS ###############
############################################

branch_name=""
project_name=""
staged_count=""
modified_count=""
untracked_count=""
deleted_count=""
get_git_repo_status() {
   branch_name="$(get_branch_name)"
   project_name="$(get_project_name)"
}

master_protect() {
   if [ "$(get_current_branch)" == "master" ]
   then test ! get_yn -n "Are you sure you want to $exe_name in master?"
   fi
}

get_project_name () {
  git remote -v|head -n 1|sed -e 's/.*\/\(.*\)\.git.*/\1/'
}

display_branches () {
   project_name="$(get_project_name)"
   printf "Project: \x1b[32m%s\x1b[0m\n" "$project_name"
   branches=`git branch --list`
   while read -r branch
   do clean_branch_name=${branch//\*\ /}
      description=`git config branch.$clean_branch_name.description`
      if [ "${branch::1}" == "*" ]
      then printf "%-15s %s\n"   "$branch" "$description"
      else printf "  %-13s %s\n" "$branch" "$description"
      fi
   done <<< "$branches"
}

get_current_branch () {
   branches=`git branch --list`
   while read -r branch
   do
      if [ "${branch::1}" == "*" ]
      then clean_branch_name=${branch//\*\ /}
           printf "%s" "$clean_branch_name"
           break
      fi
   done <<< "$branches"
}



function gbranch() {
   if [ $# -gt 2 ]
   then echo 'Too Many Parameters. Usage: gbranch [branch_name ["description"]]'
        exit 2
   fi
   
   if [ $# == 0 ]
   then display_branches
   else branch=`get_current_branch`
        if [ "$branch" != "$1" ]
        then if ! git checkout $1 2> /dev/null
             then read -p "Create a new branch $1? [Y/n] " x
                  if [[ "$x" == [Yy] ]]
                  then if git checkout -b $1
                       then if [ "$2" ]
                            then git config branch.$1.description "$2"
                            fi
                       fi
                  fi
             fi
        fi
        if [ "$2" ]
        then git config branch.$1.description "$2"
        fi
        display_branches
   fi
}

function gpush() {
   branch=$1
   if [ -z "$branch" ]
   then branch="$(get_current_branch)"
   fi
   git push origin $branch
}

function gpull() {
   branch=$1
   if [ -z "$branch" ]
   then branch="$(get_current_branch)"
   fi
   git fetch
   git pull origin $branch
}

function gmerge() {
   if [ $# -ne 1 ]
   then echo 'Invalid parameters. Usage: gmerge branch_name'
        exit 2
   fi
   if master_protect
   then git merge $1
   fi
}

function gdiff() {
   git diff $*
}

function gcheckout() {
   git checkout $*
}

function gstatus() {
   git status
}

function gadd() {
   git add "$@"
}

function gu() {
   # Graphical UI
   while true
   do clear
      echo "Git Utilities Menu ($(get_project_name))"
      echo
      echo "1. Branches ($(get_current_branch))"
      echo "2. Current Changes (s: t: u: )"
   done
}

############################################
########### DOCKER FUNCTIONS ###############
############################################

function dps() {
   echo running docker ps
   sudo docker ps
}

function dbuild() {
   echo running docker build
   sudo docker build "$@" .
}

function dkill() {
   containers="$(sudo docker ps|grep -v '^CONTAIN'|cut -d' ' -f 1)"
   for container in $containers
   do echo killing $container
      sudo docker kill $container
   done
}

function drm() {
   images="$(sudo docker image ls|grep -v '^REPOSITORY'|tr -s ' '|grep '^[^ ]\+ <none> .*'|cut -d ' ' -f 3)"
   for image in $images
   do echo deleting $image
      sudo docker rmi -f $image
   done 
}

function dstart() {
   last_image="$(sudo docker image ls |grep -v '^REPOSITORY'|head -n 1|tr -s ' ' |cut -d ' ' -f 3)"
   echo starting docker image $last_image
   sudo docker run "$@" $last_image
}

############################################
###########       MAIN       ###############
############################################

if ! grep -w "$exe_name" <<< "$functions" &> /dev/null
then echo unknown function $exe_name
     exit 1
fi
$exe_name "$@"
